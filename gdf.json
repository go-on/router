{
  "Exports": {
    "*OptionsServer.ServeHTTP": "(*OptionsServer) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "*Router.AddWrappers": "(*Router) AddWrappers(...wrap.Wrapper)",
    "*Router.AllGETPaths": "(*Router) AllGETPaths(RouteParameter) []string",
    "*Router.DELETE": "(*Router) DELETE(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.DELETEFunc": "(*Router) DELETEFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "*Router.DynamicRoutes": "(*Router) DynamicRoutes() []*github.com/go-on/router/route.Route",
    "*Router.EachGETRoute": "(*Router) EachGETRoute((string,*github.com/go-on/router/route.Route))",
    "*Router.EachRoute": "(*Router) EachRoute((string,*github.com/go-on/router/route.Route))",
    "*Router.GET": "(*Router) GET(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.GETFunc": "(*Router) GETFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "*Router.GETPathsByStruct": "(*Router) GETPathsByStruct(map[*github.com/go-on/router/route.Route]map[string][]interface{}) []string",
    "*Router.HEAD": "(*Router) HEAD(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.HEADFunc": "(*Router) HEADFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "*Router.Handle": "(*Router) Handle(string,github.com/go-on/method.Method,net/http.Handler)(*github.com/go-on/router/route.Route,error)",
    "*Router.Menu": "(*Router) Menu(MenuAdder,MenuParameter)",
    "*Router.Mount": "(*Router) Mount(string,*net/http.ServeMux) error",
    "*Router.MountPath": "(*Router) MountPath() string",
    "*Router.MountPoint": "(*Router) MountPoint() string",
    "*Router.MustHandle": "(*Router) MustHandle(string,github.com/go-on/method.Method,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.MustMount": "(*Router) MustMount(string,*net/http.ServeMux)",
    "*Router.MustRegisterRoute": "(*Router) MustRegisterRoute(*github.com/go-on/router/route.Route,github.com/go-on/method.Method,net/http.Handler)",
    "*Router.MustSavePages": "(*Router) MustSavePages(RouteParameter,net/http.Handler,string)",
    "*Router.OPTIONS": "(*Router) OPTIONS(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.OPTIONSFunc": "(*Router) OPTIONSFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "*Router.PATCH": "(*Router) PATCH(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.PATCHFunc": "(*Router) PATCHFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "*Router.POST": "(*Router) POST(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.POSTFunc": "(*Router) POSTFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "*Router.PUT": "(*Router) PUT(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.PUTFunc": "(*Router) PUTFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "*Router.Parent": "(*Router) Parent() *Router",
    "*Router.Path": "(*Router) Path() string",
    "*Router.RegisterRoute": "(*Router) RegisterRoute(*github.com/go-on/router/route.Route,github.com/go-on/method.Method,net/http.Handler) error",
    "*Router.Route": "(*Router) Route(string) *github.com/go-on/router/route.Route",
    "*Router.SavePages": "(*Router) SavePages(RouteParameter,net/http.Handler,string) map[string]error",
    "*Router.ServeHTTP": "(*Router) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "*Router.StaticRoutePaths": "(*Router) StaticRoutePaths() []string",
    "*Router.TRACE": "(*Router) TRACE(string,net/http.Handler) *github.com/go-on/router/route.Route",
    "*Router.TRACEFunc": "(*Router) TRACEFunc(string,net/http.HandlerFunc) *github.com/go-on/router/route.Route",
    "DumpPaths": "func (net/http.Handler,[]string,string) map[string]error",
    "HasParams": "func (*github.com/go-on/router/route.Route) bool",
    "MenuAdder": "type MenuAdder interface {Add(github.com/go-on/menu.Leaf,*github.com/go-on/router/route.Route,map[string]string)}",
    "MenuParameter": "type MenuParameter interface {Params(*github.com/go-on/router/route.Route) []map[string]string; Text(*github.com/go-on/router/route.Route,map[string]string) string}",
    "Mount": "func (string,*Router) error",
    "MustMount": "func (string,*Router)",
    "MustURL": "func (*github.com/go-on/router/route.Route,...string) string",
    "MustURLMap": "func (*github.com/go-on/router/route.Route,map[string]string) string",
    "MustURLStruct": "func (*github.com/go-on/router/route.Route,interface{},string) string",
    "New": "func () *Router",
    "NewETagged": "func () *Router",
    "OptionsServer": "type OptionsServer struct { *github.com/go-on/router/route.Route}",
    "RouteParameter": "type RouteParameter interface {Params(*github.com/go-on/router/route.Route) []map[string]string}",
    "RouteParameterFunc": "type RouteParameterFunc (*github.com/go-on/router/route.Route) []map[string]string",
    "RouteParameterFunc.Params": "(RouteParameterFunc) Params(*github.com/go-on/router/route.Route) []map[string]string",
    "Router": "type Router struct{}",
    "RouterFunc": "type RouterFunc () net/http.Handler",
    "RouterFunc.ServeHTTP": "(RouterFunc) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "URL": "func (*github.com/go-on/router/route.Route,...string)(string,error)",
    "URLMap": "func (*github.com/go-on/router/route.Route,map[string]string)(string,error)",
    "URLStruct": "func (*github.com/go-on/router/route.Route,interface{},string)(string,error)",
    "init": ""
  },
  "Imports": {
    "code.google.com/p/go-html-transform/html/transform.CopyAnd": "func (...TransformFunc) TransformFunc",
    "code.google.com/p/go-html-transform/html/transform.NewFromReader": "func (io.Reader)(*Transformer,error)",
    "code.google.com/p/go-html-transform/html/transform.TransformAttrib": "func (string,(string) string) TransformFunc",
    "code.google.com/p/go-html-transform/html/transform.init": "",
    "github.com/go-on/menu.Item": "func (string,string) Leaf",
    "github.com/go-on/menu.Leaf": "type Leaf interface {Path() string; String() string}",
    "github.com/go-on/menu.init": "",
    "github.com/go-on/meta.*Field.Set": "(*Field) Set(reflect.Value) error",
    "github.com/go-on/meta.Field": "type Field struct {Struct *Struct; Type reflect.StructField; Value *reflect.Value}",
    "github.com/go-on/meta.StructByValue": "func (reflect.Value)(*Struct,error)",
    "github.com/go-on/meta.init": "",
    "github.com/go-on/method.DELETE": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.GET": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.HEAD": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.Method": "type Method int",
    "github.com/go-on/method.Method.EmptyBody": "(Method) EmptyBody() bool",
    "github.com/go-on/method.Method.IsIdempotent": "(Method) IsIdempotent() bool",
    "github.com/go-on/method.Method.IsResponseCacheable": "(Method) IsResponseCacheable() bool",
    "github.com/go-on/method.Method.IsSafe": "(Method) IsSafe() bool",
    "github.com/go-on/method.Method.String": "(Method) String() string",
    "github.com/go-on/method.OPTIONS": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.PATCH": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.POST": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.PUT": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.StringToMethod": "map[string]Method{\n\u0009\"POST\":\u0009POST,\n\u0009\"GET\":\u0009GET,\n\u0009\"PUT\":\u0009PUT,\n\u0009\"DELETE\":\u0009DELETE,\n\u0009\"PATCH\":\u0009PATCH,\n\u0009\"OPTIONS\":\u0009OPTIONS,\n\u0009\"HEAD\":\u0009HEAD,\n\u0009\"TRACE\":\u0009TRACE,\n}",
    "github.com/go-on/method.TRACE": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.init": "",
    "github.com/go-on/router/route.*Route.AddHandler": "(*Route) AddHandler(net/http.Handler,github.com/go-on/method.Method) error",
    "github.com/go-on/router/route.*Route.HasMethod": "(*Route) HasMethod(github.com/go-on/method.Method) bool",
    "github.com/go-on/router/route.*Route.SetHandler": "(*Route) SetHandler(github.com/go-on/method.Method,net/http.Handler)",
    "github.com/go-on/router/route.NewRoute": "func (string) *Route",
    "github.com/go-on/router/route.Route": "type Route struct {Handlers map[github.com/go-on/method.Method]net/http.Handler; MountedPath string; OriginalPath string; RessourceOptions string; Router MountPather}",
    "github.com/go-on/router/route.init": "",
    "github.com/go-on/wrap-contrib/helper.NewResponseBuffer": "func (net/http.ResponseWriter) *ResponseBuffer",
    "github.com/go-on/wrap-contrib/helper.init": "",
    "github.com/go-on/wrap-contrib/wraps.ETag": "etag{}",
    "github.com/go-on/wrap-contrib/wraps.IfMatch": "func (net/http.Handler) github.com/go-on/wrap.Wrapper",
    "github.com/go-on/wrap-contrib/wraps.IfNoneMatch": "ifNoneMatch{}",
    "github.com/go-on/wrap-contrib/wraps.MethodOverride": "func () methodOverride",
    "github.com/go-on/wrap-contrib/wraps.init": "",
    "github.com/go-on/wrap.Wrapper": "type Wrapper interface {Wrap(net/http.Handler) net/http.Handler}",
    "github.com/go-on/wrap.init": ""
  },
  "Path": "github.com/go-on/router"
}
