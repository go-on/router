{
  "Exports": {
    "*Route.HasParams": "(*Route) HasParams() bool",
    "*Route.MustURL": "(*Route) MustURL(...string) string",
    "*Route.MustURLMap": "(*Route) MustURLMap(map[string]string) string",
    "*Route.MustURLStruct": "(*Route) MustURLStruct(interface{},string) string",
    "*Route.Route": "(*Route) Route() string",
    "*Route.Router": "(*Route) Router() *Router",
    "*Route.ServeHTTP": "(*Route) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "*Route.URL": "(*Route) URL(...string)(string,error)",
    "*Route.URLMap": "(*Route) URLMap(map[string]string)(string,error)",
    "*Route.URLStruct": "(*Route) URLStruct(interface{},string)(string,error)",
    "*Router.AddWrappers": "(*Router) AddWrappers(...wrap.Wrapper)",
    "*Router.AllGETPaths": "(*Router) AllGETPaths(RouteParameter) []string",
    "*Router.DELETE": "(*Router) DELETE(string,net/http.Handler) *Route",
    "*Router.DynamicRoutes": "(*Router) DynamicRoutes() []*Route",
    "*Router.EachGETRoute": "(*Router) EachGETRoute((string,*Route))",
    "*Router.EachRoute": "(*Router) EachRoute((string,*Route))",
    "*Router.GET": "(*Router) GET(string,net/http.Handler) *Route",
    "*Router.GETPathsByStruct": "(*Router) GETPathsByStruct(map[*Route]map[string][]interface{}) []string",
    "*Router.HEAD": "(*Router) HEAD(string,net/http.Handler) *Route",
    "*Router.Handle": "(*Router) Handle(string,github.com/go-on/method.Method,net/http.Handler)(*Route,error)",
    "*Router.Mount": "(*Router) Mount(string,*net/http.ServeMux) error",
    "*Router.MountPoint": "(*Router) MountPoint() string",
    "*Router.MustHandle": "(*Router) MustHandle(string,github.com/go-on/method.Method,net/http.Handler) *Route",
    "*Router.MustMount": "(*Router) MustMount(string,*net/http.ServeMux)",
    "*Router.MustSavePages": "(*Router) MustSavePages(RouteParameter,net/http.Handler,string)",
    "*Router.OPTIONS": "(*Router) OPTIONS(string,net/http.Handler) *Route",
    "*Router.PATCH": "(*Router) PATCH(string,net/http.Handler) *Route",
    "*Router.POST": "(*Router) POST(string,net/http.Handler) *Route",
    "*Router.PUT": "(*Router) PUT(string,net/http.Handler) *Route",
    "*Router.Parent": "(*Router) Parent() *Router",
    "*Router.Path": "(*Router) Path() string",
    "*Router.Route": "(*Router) Route(string) *Route",
    "*Router.SavePages": "(*Router) SavePages(RouteParameter,net/http.Handler,string) map[string]error",
    "*Router.ServeHTTP": "(*Router) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "*Router.StaticRoutePaths": "(*Router) StaticRoutePaths() []string",
    "*Router.TRACE": "(*Router) TRACE(string,net/http.Handler) *Route",
    "*Vars.Get": "(*Vars) Get(string) string",
    "*Vars.Has": "(*Vars) Has(string) bool",
    "*Vars.SetStruct": "(*Vars) SetStruct(interface{},string) error",
    "DumpPaths": "func (net/http.Handler,[]string,string) map[string]error",
    "Mount": "func (string,*Router) error",
    "MustMount": "func (string,*Router)",
    "New": "func () *Router",
    "NewETagged": "func () *Router",
    "Route": "type Route struct{}",
    "RouteParameter": "type RouteParameter interface {Params(*Route) []map[string]string}",
    "RouteParameterFunc": "type RouteParameterFunc (*Route) []map[string]string",
    "RouteParameterFunc.Params": "(RouteParameterFunc) Params(*Route) []map[string]string",
    "Router": "type Router struct{}",
    "RouterFunc": "type RouterFunc () net/http.Handler",
    "RouterFunc.ServeHTTP": "(RouterFunc) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "Vars": "type Vars struct { net/http.ResponseWriter}",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/meta.*Field.Set": "(*Field) Set(reflect.Value) error",
    "github.com/go-on/meta.Field": "type Field struct {Struct *Struct; Type reflect.StructField; Value *reflect.Value}",
    "github.com/go-on/meta.StructByValue": "func (reflect.Value)(*Struct,error)",
    "github.com/go-on/meta.init": "",
    "github.com/go-on/method.DELETE": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.GET": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.HEAD": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.Method": "type Method int",
    "github.com/go-on/method.Method.EmptyBody": "(Method) EmptyBody() bool",
    "github.com/go-on/method.Method.IsIdempotent": "(Method) IsIdempotent() bool",
    "github.com/go-on/method.Method.IsResponseCacheable": "(Method) IsResponseCacheable() bool",
    "github.com/go-on/method.Method.IsSafe": "(Method) IsSafe() bool",
    "github.com/go-on/method.Method.String": "(Method) String() string",
    "github.com/go-on/method.OPTIONS": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.PATCH": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.POST": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.PUT": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.StringToMethod": "map[string]Method{\n\u0009\"POST\":\u0009POST,\n\u0009\"GET\":\u0009GET,\n\u0009\"PUT\":\u0009PUT,\n\u0009\"DELETE\":\u0009DELETE,\n\u0009\"PATCH\":\u0009PATCH,\n\u0009\"OPTIONS\":\u0009OPTIONS,\n\u0009\"HEAD\":\u0009HEAD,\n\u0009\"TRACE\":\u0009TRACE,\n}",
    "github.com/go-on/method.TRACE": "const Method 1 \u003c\u003c iota",
    "github.com/go-on/method.init": "",
    "github.com/go-on/wrap-contrib/wraps.ETag": "etag{}",
    "github.com/go-on/wrap-contrib/wraps.IfMatch": "func (net/http.Handler) github.com/go-on/wrap.Wrapper",
    "github.com/go-on/wrap-contrib/wraps.IfNoneMatch": "ifNoneMatch{}",
    "github.com/go-on/wrap-contrib/wraps.MethodOverride": "func () methodOverride",
    "github.com/go-on/wrap-contrib/wraps.init": "",
    "github.com/go-on/wrap.Wrapper": "type Wrapper interface {Wrap(net/http.Handler) net/http.Handler}",
    "github.com/go-on/wrap.init": ""
  },
  "Path": "github.com/go-on/router"
}
