{
  "Exports": {
    "MustSet": "func (*github.com/go-on/router.Vars,interface{},string)",
    "MustUrl": "func (*github.com/go-on/router.Route,interface{},string) string",
    "Set": "func (*github.com/go-on/router.Vars,interface{},string) error",
    "Url": "func (*github.com/go-on/router.Route,interface{},string)(string,error)",
    "init": ""
  },
  "Imports": {
    "github.com/go-on/fat.*Field.Get": "(*Field) Get() interface{}",
    "github.com/go-on/fat.*Field.IsValid": "(*Field) IsValid() bool",
    "github.com/go-on/fat.*Field.MarshalJSON": "(*Field) MarshalJSON()([]byte,error)",
    "github.com/go-on/fat.*Field.MustScanAndValidate": "(*Field) MustScanAndValidate(string)",
    "github.com/go-on/fat.*Field.MustScanString": "(*Field) MustScanString(string)",
    "github.com/go-on/fat.*Field.MustSet": "(*Field) MustSet(interface{})",
    "github.com/go-on/fat.*Field.MustValidate": "(*Field) MustValidate()",
    "github.com/go-on/fat.*Field.Scan": "(*Field) Scan(interface{}) error",
    "github.com/go-on/fat.*Field.ScanAndValidate": "(*Field) ScanAndValidate(string) []error",
    "github.com/go-on/fat.*Field.ScanString": "(*Field) ScanString(string) error",
    "github.com/go-on/fat.*Field.Set": "(*Field) Set(interface{}) error",
    "github.com/go-on/fat.*Field.String": "(*Field) String() string",
    "github.com/go-on/fat.*Field.UnmarshalJSON": "(*Field) UnmarshalJSON([]byte) error",
    "github.com/go-on/fat.*Field.Validate": "(*Field) Validate() []error",
    "github.com/go-on/fat.*Field.Value": "(*Field) Value()(database/sql/driver.Value,error)",
    "github.com/go-on/fat.Field": "type Field struct { Type; FailedScanInput string; IsSet bool; Struct interface{}}",
    "github.com/go-on/fat.init": "",
    "github.com/go-on/meta.*Field.Set": "(*Field) Set(reflect.Value) error",
    "github.com/go-on/meta.*Struct.Each": "(*Struct) Each((*Field))",
    "github.com/go-on/meta.*Struct.EachTag": "(*Struct) EachTag(string,(*Field,string))",
    "github.com/go-on/meta.*Struct.Field": "(*Struct) Field(string)(*Field,error)",
    "github.com/go-on/meta.*Struct.Set": "(*Struct) Set(reflect.Value) error",
    "github.com/go-on/meta.Field": "type Field struct {Struct *Struct; Type reflect.StructField; Value *reflect.Value}",
    "github.com/go-on/meta.Struct": "type Struct struct {Value *reflect.Value}",
    "github.com/go-on/meta.StructByValue": "func (reflect.Value)(*Struct,error)",
    "github.com/go-on/meta.init": "",
    "github.com/go-on/router.*Route.MustURL": "(*Route) MustURL(...string) string",
    "github.com/go-on/router.*Route.MustURLMap": "(*Route) MustURLMap(map[string]string) string",
    "github.com/go-on/router.*Route.MustURLStruct": "(*Route) MustURLStruct(interface{},string) string",
    "github.com/go-on/router.*Route.Router": "(*Route) Router() *Router",
    "github.com/go-on/router.*Route.ServeHTTP": "(*Route) ServeHTTP(net/http.ResponseWriter,*net/http.Request)",
    "github.com/go-on/router.*Route.URL": "(*Route) URL(...string)(string,error)",
    "github.com/go-on/router.*Route.URLMap": "(*Route) URLMap(map[string]string)(string,error)",
    "github.com/go-on/router.*Route.URLStruct": "(*Route) URLStruct(interface{},string)(string,error)",
    "github.com/go-on/router.*Vars.Get": "(*Vars) Get(string) string",
    "github.com/go-on/router.*Vars.Has": "(*Vars) Has(string) bool",
    "github.com/go-on/router.*Vars.SetStruct": "(*Vars) SetStruct(interface{},string) error",
    "github.com/go-on/router.Route": "type Route struct{}",
    "github.com/go-on/router.Vars": "type Vars struct { net/http.ResponseWriter}",
    "github.com/go-on/router.init": ""
  },
  "Path": "github.com/go-on/router/routerfat"
}
